<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>name</key>
	<string>Completion: Character Class indifferent</string>
	<key>scope</key>
	<string>source, text</string>
	<key>settings</key>
	<dict>
		<key>completionCommand</key>
		<string>#!/usr/bin/env ruby18 -wKU
word_begin, current_word = ENV["TM_CURRENT_WORD"].scan(/^([^\w_]+)?([\w_]+)/).first

exit if current_word.nil?

regexp = /\b(#{Regexp.escape current_word}[\w_]*)/
current_line = ENV["TM_LINE_NUMBER"].to_i
current_index = ENV["TM_LINE_INDEX"].to_i
pre = ""
post = ""
completions = []

STDIN.each_with_index do |line, line_number|
  line_number += 1
  if line_number &lt; current_line
    pre &lt;&lt; line
  elsif line_number == current_line
    pre &lt;&lt; line[0...current_index]
    post &lt;&lt; line[current_index..-1]
  else
    post &lt;&lt; line
  end
end

# contents.scan(regexp).flatten
pre.scan(regexp) do |match|
  pos = Regexp.last_match.end(0)
  completions &lt;&lt; [pre.size-pos, "#{word_begin}#{match}"]
end

post.scan(regexp) do |match|
  pos = Regexp.last_match.begin(0)
  completions &lt;&lt; [pos, "#{word_begin}#{match}"]
end

puts completions.sort.map(&amp;:last).uniq
</string>
	</dict>
	<key>uuid</key>
	<string>9DBFFF91-3757-4A47-A46E-786923C3E03C</string>
</dict>
</plist>
